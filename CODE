-- Create a database
CREATE DATABASE Company;

-- Use Company database
USE Company;

-- Create tables
CREATE TABLE Department (
    DeptID INT PRIMARY KEY AUTO_INCREMENT,
    DeptName VARCHAR(50) NOT NULL
);

CREATE TABLE Employee (
    EmpID INT PRIMARY KEY AUTO_INCREMENT,
    EmpName VARCHAR(100) NOT NULL,
    EmpDeptID INT,
    FOREIGN KEY (EmpDeptID) REFERENCES Department(DeptID)
);

-- Create a log table for tracking changes
CREATE TABLE EmployeeLog (
    LogID INT PRIMARY KEY AUTO_INCREMENT,
    EmpID INT,
    ActionType VARCHAR(50),
    ActionTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Add indexes for faster lookup
CREATE INDEX idx_EmpDeptID ON Employee(EmpDeptID);
CREATE INDEX idx_DeptName ON Department(DeptName);

-- Insert data with transaction to ensure data integrity
START TRANSACTION;
INSERT INTO Department (DeptName) VALUES ('Engineering');
INSERT INTO Department (DeptName) VALUES ('Sales');
COMMIT;

-- Stored Procedure to add employees
DELIMITER $$
CREATE PROCEDURE AddEmployee(IN empName VARCHAR(100), IN empDeptID INT)
BEGIN
    INSERT INTO Employee (EmpName, EmpDeptID) VALUES (empName, empDeptID);
END $$
DELIMITER ;

-- Use stored procedure to insert employees
CALL AddEmployee('John Doe', 1);
CALL AddEmployee('Jane Smith', 2);

-- Create a view to simplify employee reporting
CREATE VIEW EmployeeDetails AS
SELECT E.EmpID, E.EmpName, D.DeptName
FROM Employee E
JOIN Department D ON E.EmpDeptID = D.DeptID;

-- Trigger to log employee additions
DELIMITER $$
CREATE TRIGGER AfterEmployeeInsert
AFTER INSERT ON Employee
FOR EACH ROW
BEGIN
    INSERT INTO EmployeeLog (EmpID, ActionType) VALUES (NEW.EmpID, 'INSERT');
END $$
DELIMITER ;

-- Query to view employee details
SELECT * FROM EmployeeDetails;

-- Check employee logs
SELECT * FROM EmployeeLog;
